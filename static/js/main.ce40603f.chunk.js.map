{"version":3,"sources":["Comps/ContactForm/ContactForm.js","Comps/ContactList/ContactList.js","Comps/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","this","type","pattern","title","required","onChange","Component","ContactList","dBase","onDeleteContact","map","el","onClick","id","Filter","App","contacts","filter","appendDBase","data","includes","alert","pState","nanoid","changeFilter","getFilterContacts","filterLowerC","toLowerCase","contact","deleteContact","contactId","isContacts","JSON","parse","localStorage","getItem","pProps","setItem","stringify","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAGqBA,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAiBD,EAAEE,OAAOL,KAAOG,EAAEE,OAAOC,S,EAG5CC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKX,OACzB,EAAKK,SAAS,CAAEJ,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,uBAAMS,SAAUC,KAAKJ,aAArB,UACE,sCACA,uBACEK,KAAK,OACLZ,KAAK,OACLa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRT,MAAOK,KAAKZ,MAAMC,KAClBgB,SAAUL,KAAKT,eAGjB,wCACA,uBACEU,KAAK,MACLZ,KAAK,SACLa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRT,MAAOK,KAAKZ,MAAME,OAClBe,SAAUL,KAAKT,eAEjB,uBACA,wBAAQU,KAAK,SAAb,gC,GAzCiCK,aCD1B,SAASC,EAAT,GAAkD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBAC3C,OACE,6BACGD,EAAME,KAAI,SAACC,GAAD,OACT,6BACE,8BACE,iCACGA,EAAGtB,KADN,KACcsB,EAAGrB,OAAS,cAE1B,wBAAQW,KAAK,SAASW,QAAS,kBAAMH,EAAgBE,EAAGE,KAAxD,wBALKF,EAAGE,SCJL,SAASC,EAAT,GAAsC,IAApBnB,EAAmB,EAAnBA,MAAOU,EAAY,EAAZA,SACtC,OACE,qCACE,uDACA,uBAAOJ,KAAK,OAAON,MAAOA,EAAOU,SAAUA,O,ICC5BU,E,4MACnB3B,MAAQ,CACN4B,SAAU,GAMVC,OAAQ,I,EAGVC,YAAc,SAAAC,GACR,EAAK/B,MAAM4B,SAASN,KAAI,SAAAC,GAAE,OAAIA,EAAGtB,QAAM+B,SAASD,EAAK9B,MACvDgC,MAAM,GAAD,OAAIF,EAAK9B,KAAT,6BAEL,EAAKI,UAAS,SAAA6B,GAAM,MAAK,CACvBN,SAAS,GAAD,mBACHM,EAAON,UADJ,cAGJH,GAAIU,YAAO,KACRJ,U,EAMbK,aAAe,SAAAhC,GACb,EAAKC,SAAS,CAAEwB,OAAQzB,EAAEE,OAAOC,S,EAGnC8B,kBAAoB,WAClB,IAAMC,EAAe,EAAKtC,MAAM6B,OAAOU,cAEvC,OAAO,EAAKvC,MAAM4B,SAASC,QAAO,SAAAW,GAAO,OACvCA,EAAQvC,KAAKsC,cAAcP,SAASM,O,EAIxCG,cAAgB,SAAAC,GACd,EAAKrC,UAAS,SAAA6B,GAAM,MAAK,CACvBN,SAAUM,EAAON,SAASC,QAAO,SAAAW,GAAO,OAAIA,EAAQf,KAAOiB,U,uDAI/D,WAEE,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,aAC/CJ,GAAY/B,KAAKP,SAAS,CAAEuB,SAAUe,M,gCAG5C,SAAmBK,EAAQd,GAErBtB,KAAKZ,MAAM4B,WAAaM,EAAON,UACjCkB,aAAaG,QAAQ,WAAYL,KAAKM,UAAUtC,KAAKZ,MAAM4B,a,oBAG/D,WACE,OACE,qCACE,2CACA,cAAC,EAAD,CAAajB,SAAUC,KAAKkB,cAC5B,0CACA,cAACJ,EAAD,CAAQnB,MAAOK,KAAKZ,MAAM6B,OAAQZ,SAAUL,KAAKwB,eACjD,cAACjB,EAAD,CACEC,MAAOR,KAAKyB,oBACZhB,gBAAiBT,KAAK6B,uB,GAjECU,IAAMjC,WCDvCkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce40603f.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h3>Name</h3>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n\n        <h3>Number</h3>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={this.state.number}\n          onChange={this.handleChange}\n        />\n        <br></br>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function ContactList({ dBase, onDeleteContact }) {\n  return (\n    <ol>\n      {dBase.map((el) => (\n        <li key={el.id}>\n          <p>\n            <span>\n              {el.name}: {el.number + \"  \"}\n            </span>\n            <button type=\"button\" onClick={() => onDeleteContact(el.id)}>\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nContactList.propTypes = {\n  dBase: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input type=\"text\" value={value} onChange={onChange}></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from \"react\"; // import { v4 as uuid } from \"uuid\";\nimport { nanoid } from \"nanoid\";\n\nimport ContactForm from \"./Comps/ContactForm/ContactForm\";\nimport ContactList from \"./Comps/ContactList/ContactList\";\nimport Filter from \"./Comps/Filter/Filter\";\n\nexport default class App extends React.Component {\n  state = {\n    contacts: [\n      // { id: \"id-1\", name: \"Rousie Simpson\", number: \"459-12-56\" },\n      // { id: \"id-2\", name: \"Hermeone Kline\", number: \"443-89-12\" },\n      // { id: \"id-3\", name: \"Eaden Clements\", number: \"645-17-79\" },\n      // { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  appendDBase = data => {\n    if (this.state.contacts.map(el => el.name).includes(data.name))\n      alert(`${data.name} is already in contacts.`);\n    else\n      this.setState(pState => ({\n        contacts: [\n          ...pState.contacts,\n          {\n            id: nanoid(10),\n            ...data,\n          },\n        ],\n      }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilterContacts = () => {\n    const filterLowerC = this.state.filter.toLowerCase();\n\n    return this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterLowerC)\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(pState => ({\n      contacts: pState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  componentDidMount() {\n    // console.log(\"add componentDidMount\");\n    const isContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (isContacts) this.setState({ contacts: isContacts });\n  }\n\n  componentDidUpdate(pProps, pState) {\n    // console.log(\"add componentDidUpdate\");\n    if (this.state.contacts !== pState.contacts)\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  }\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.appendDBase} />\n        <h2>Contacts</h2>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <ContactList\n          dBase={this.getFilterContacts()}\n          onDeleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals' Shu;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals() Shu;\n"],"sourceRoot":""}